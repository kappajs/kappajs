{"version":3,"sources":["kappa.js","node_modules/lit-html/lit-html.js","hello-world.js","index.js"],"names":["component","componentMap","Kappa","el","console","log","name","template","definition","Error","KappaComponent","window","customElements","define","shadow","attachShadow","mode","innerHTML","created","attrName","oldVal","newVal","updated","defaultTemplateFactory","render","templateCaches","Map","html","strings","values","TemplateResult","svg","SVGTemplateResult","constructor","type","partCallback","defaultPartCallback","getHTML","l","length","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","getTemplateElement","document","createElement","content","svgElement","firstChild","removeChild","reparentNodes","result","templateCache","get","undefined","set","Template","container","templateFactory","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","open","indexOf","TemplatePart","index","rawName","isTemplatePartActive","part","element","parts","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","insertBefore","createComment","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","getValue","isDirective","noChange","directive","f","__litDirective","o","directiveValue","isPrimitiveValue","AttributePart","size","_previousValues","_interpolate","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","setValue","join","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","_insert","clear","textContent","_getTemplate","itemParts","item","itemPart","itemStart","previousPart","lastPart","templatePart","getTemplate","_parts","valueIndex","cloneNode","partActive","start","end","before","querySelector"],"mappings":"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","file":"webcomponents.04735dff.map","sourceRoot":"..","sourcesContent":["let componentMap = {};\r\n\r\nexport default class Kappa {\r\n  \r\n  constructor(el) {\r\n    this.el = el;\r\n    console.log('Kappa bootstrapped');\r\n  }\r\n}\r\n\r\nexport function component(name, template, definition) {\r\n  if (componentMap[name]) throw new Error(`The component ${name} is already registered`);\r\n  const component = new KappaComponent(definition, template);\r\n  window.customElements.define(name, component);\r\n  return component;\r\n}\r\n\r\nexport class KappaComponent extends HTMLElement {\r\n  constructor(definition, template) {\r\n    super();\r\n    this.definition = definition;\r\n    const shadow = this.attachShadow({ mode: 'open'});\r\n    shadow.innerHTML = template;\r\n  }\r\n\r\n  connectedCallback() {\r\n    definition.created();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    \r\n  }\r\n\r\n  attributeChangedCallback(attrName, oldVal, newVal) {\r\n    definition.updated();\r\n  }\r\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    // TODO(justinfagnani): remove non-null assertion\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore((strings[i] === '')\n                        ? document.createComment('')\n                        : document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n                parent.insertBefore(strings[lastIndex] === '' ?\n                    document.createComment('') :\n                    document.createTextNode(strings[lastIndex]), node);\n                nodesToRemove.push(node);\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return noChange;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * @deprecated Use `noChange` instead.\n */\nexport { noChange as directiveValue };\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== noChange &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (!part) {\n                valueIndex++;\n            }\n            else if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        // Clone the node, rather than importing it, to keep the fragment in the\n        // template's document. This leaves the fragment inert so custom elements\n        // won't upgrade until after the main document adopts the node.\n        const fragment = this.template.element.content.cloneNode(true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const partActive = isTemplatePartActive(part);\n                // An inactive part has no coresponding Template node.\n                if (partActive) {\n                    while (index < part.index) {\n                        index++;\n                        walker.nextNode();\n                    }\n                }\n                this._parts.push(partActive ? this._partCallback(this, part, walker.currentNode) : undefined);\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","import { component } from './kappa';\r\nimport { html } from 'lit-html';\r\n\r\nconst template = () => {\r\n  html`\r\n    <h1>Hello World</h1>\r\n  `\r\n}\r\n\r\ncomponent('hello-world', template, {\r\n  created() {\r\n    console.log('created');\r\n  }\r\n})","import Kappa from './kappa';\r\nimport './hello-world';\r\n\r\nconst el = document.querySelector('.app');\r\n\r\nexport default new Kappa(el);"]}